Assignment 1:
This repository contains the files that make up the assignment(s) for concepts of programming languages.
The standard format is as follows: there is one main.cc file which contains the main code. 
Classes and their implementations are split into separate .h/.cc files which contain the class declaration (.h) and its implementation (.cc)
Variables are named using lowercase letters in case of one-word variables and camel-case in case of multiple-word variables.
During programming, multiple checkpoints are made to keep track of progress. At each checkpoint, the changes are committed.
Each function in the program has a line with commentary in which is explained what that function does.
The program works as intended
There are no known deviations to the assignment
The program works by first tokenizing the input, where the input is split up into variables, which are strings of letters and numbers that start with a number, 
opening parentheses, closing parentheses, whitespace and lambdas (or backslashes). The tokens and corresponding characters are then put into a vector that 
the parser moves through.
After tokenizing the input goes through the parser, where if statements guide each element through the functions, which are recursive functions that
correspond to the LL grammar of lambda calculus. As the program moves through these functions, accepted input is added to a string, until either the whole
input is accepted, in which case the program exits with exit status 0 and prints said string, 
or the input contains a syntax error in which case the input is erased from the string and the program exits with exit status 1 and an error message.


Students:
Marit Kraijenoord, s3180131
Jasmijn Makop, s3688321
Concepts of programming languages (semester 1 of 2023/2024)
Marit Kraijenoord - Jasmijn Makop

Assignment 2:
The compiler version used is gcc compiler, and the operating system used is Windows 11. 
The program works correctly and there are no deviations from the assignment.
The program works by tokenizing the input and parsing it into an abstract syntax tree. 
The program tokenizes the input, (also making sure that the var is of the correct form,
by checking that it does not start with a number), and makes vector pairs of the enum corresponding to the inputted variable, (which is either var, lambda, openb, 
closedb or space) and the symbol corresponding to the variable itself. It then places the tokens into the abstract syntax tree.
By going through the abstract syntax tree the string containing the eventual result gets
filled up with the symbols corresponding to the input, parsed by the program. If there are no syntax errors, the result gets printed. The result can be input
for the program and yield the exact same result. If the program encounters any syntax errors it exits with status 1 and a corresponding error message.
The syntax tree gets reduced through alpha conversion and beta reduction, by going root by root and finding the used variables and replacing them with free ones, before
correcting roots and reducing the abstract syntax tree.
There is a safeguard against the program infinitely trying to reduce. If the program tries to beta reduce more than ten times the program exits with exit status 2.

Students:
Marit Kraijenoord, s3180131
Jasmijn Makop, s3688321
Concepts of programming languages (semester 1 of 2023/2024)
Marit Kraijenoord - Jasmijn Makop

Assignment 3:
The compiler version used is gcc compiler, and the operating system used is Windows 11. [The program works correctly and there are no deviations from the assignment.]


Students:
Marit Kraijenoord, s3180131
Jasmijn Makop, s3688321
Concepts of programming languages (semester 1 of 2023/2024)
Marit Kraijenoord - Jasmijn Makop


